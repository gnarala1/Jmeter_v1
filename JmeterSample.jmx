<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="DSPEU_Host" elementType="Argument">
            <stringProp name="Argument.name">DSPEU_Host</stringProp>
            <stringProp name="Argument.value">t8vi7ubp0g.execute-api.eu-west-1.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="API_Key" elementType="Argument">
            <stringProp name="Argument.name">API_Key</stringProp>
            <stringProp name="Argument.value">mTXjPwQqd923GgweGWgz81jARk9cV1aCaYlyEHZN</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StoreID" elementType="Argument">
            <stringProp name="Argument.name">StoreID</stringProp>
            <stringProp name="Argument.value">0172</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUpTG_Slots" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SetupTG-Get-AppointmentSlot" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="date" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">date</stringProp>
                <stringProp name="Argument.value">${c_todayDate}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="room_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">room_id</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">type</stringProp>
                <stringProp name="Argument.value">2000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="days" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">days</stringProp>
                <stringProp name="Argument.value">60</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${API_Key}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
int randomNum = rand.nextInt((2000 - 1) + 1) +365;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

c.add(Calendar.DATE, randomNum);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_slots_in_single_day - pick a random day!" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">diary.[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="TestPlan.comments">data.storeAppointmentSlots[*].appointmentSlots[*]------------old Co-relaiton that was working now the response body has changed</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDate- get date" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDate</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.date</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails - pick random appointment" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointmentSlots[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
//int randomNum = rand.nextInt((40 - 1) + 1) +10;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

//c.add(Calendar.DATE, randomNum);
c.add(Calendar.DATE, 30);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">data.storeAppointmentSlots[*].appointmentSlots[*].appointmentSlots[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotStartTime" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_slotStartTime</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.start_time</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_slotId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.slot_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - Capture all booking slots and write to file - 04042023 " enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.jayway.jsonpath.JsonPath;
import org.apache.commons.lang3.RandomUtils;
import java.util.Random;
import org.apache.jmeter.services.FileServer;
import java.nio.channels.FileLock;


//START: SET UP FILE TO WRITE SLOT DETAILS TO
def baseDir=FileServer.getFileServer().getBaseDir();
log.info(&quot;baseDir is &quot; + baseDir);

//Injector executionfile_one.csv
//f = new File(baseDir + &quot;/../data/&quot; + &quot;DSPAU_Slots.csv&quot;);

//Local execution
f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_Slots.csv&quot;);


	String vAllSlots = JsonPath.read(prev.getResponseDataAsString(),&apos;$..[?(@.slot_id)]&apos;);
	//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;======== vAllSlots: &quot; + vAllSlots + &quot;\n&quot;+ &quot;\n&quot;);

	def vId = JsonPath.read(vAllSlots, &apos;.slot_id&apos;);
	def vId_length = vId.size();
	
	//CHECK IF ANY SLOTS AVAILABLE FOR THAT DATE
	if (vId_length &gt; 0)
	{
		for ( int b = 0 ; b &lt; vId_length ; b++ )
		{
			//Define a String to strip out all the configurable product options of the product
			vDate = JsonPath.read(prev.getResponseDataAsString(), &apos;$..date&apos;);
			String vSlotDetails = JsonPath.read(prev.getResponseDataAsString(), &apos;$..[?(@.slot_id)]&apos;+vId[b]+&apos;\&apos;)]&apos;);
			def vSlotId = JsonPath.read(vSlotDetails, &apos;.slot_id&apos;);
			

			String vFinalSlotDetails = (vDate[b] + &quot;,&quot; + vId[b] + &quot;,&quot; + vSlotId).replace(&apos;[&apos;,&apos;&apos;).replace(&apos;]&apos;,&apos;&apos;);
			//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;vFinalSlotDetails: &quot; + vFinalSlotDetails + &quot;\n&quot;+ &quot;\n&quot;);

	
			//WRITE DETAILS TO FILE
			f.append(vFinalSlotDetails + &apos;\n&apos;);
		}	
	}
	
	else
	{
		log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;**** NO SLOTS AVAILABLE FOR DATE: &quot; + vDate[a] + &quot;\n&quot;+ &quot;\n&quot;);
	}



//CLEAN UP VARIABLES
vDate = null;
//vDate_length = null;
vAllSlots = null;
vId = null;
vId_length = null;
vSlotDetails = null;
vSlotId = null;
vFinalSlotDetails = null;
vFinalSlotDetailsEscChar = null;
b = 0;</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SetupTG-Get-AppointmentSlot" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="date" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">date</stringProp>
                <stringProp name="Argument.value">${c_todayDate}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="room_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">room_id</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">type</stringProp>
                <stringProp name="Argument.value">2000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="days" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">days</stringProp>
                <stringProp name="Argument.value">60</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${API_Key}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
int randomNum = rand.nextInt((2000 - 1) + 1) +365;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

c.add(Calendar.DATE, randomNum);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_slots_in_single_day - pick a random day!" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">diary.[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="TestPlan.comments">data.storeAppointmentSlots[*].appointmentSlots[*]------------old Co-relaiton that was working now the response body has changed</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDate- get date" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDate</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.date</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails - pick random appointment" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointmentSlots[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
//int randomNum = rand.nextInt((40 - 1) + 1) +10;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

//c.add(Calendar.DATE, randomNum);
c.add(Calendar.DATE, 95);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">data.storeAppointmentSlots[*].appointmentSlots[*].appointmentSlots[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotStartTime" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_slotStartTime</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.start_time</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_slotId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.slot_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - Capture all booking slots and write to file - 04042023 " enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.jayway.jsonpath.JsonPath;
import org.apache.commons.lang3.RandomUtils;
import java.util.Random;
import org.apache.jmeter.services.FileServer;
import java.nio.channels.FileLock;


//START: SET UP FILE TO WRITE SLOT DETAILS TO
def baseDir=FileServer.getFileServer().getBaseDir();
log.info(&quot;baseDir is &quot; + baseDir);

//Injector executionfile_one.csv
//f = new File(baseDir + &quot;/../data/&quot; + &quot;DSPAU_Slots.csv&quot;);

//Local execution
f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_Slots.csv&quot;);


	String vAllSlots = JsonPath.read(prev.getResponseDataAsString(),&apos;$..[?(@.slot_id)]&apos;);
	//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;======== vAllSlots: &quot; + vAllSlots + &quot;\n&quot;+ &quot;\n&quot;);

	def vId = JsonPath.read(vAllSlots, &apos;.slot_id&apos;);
	def vId_length = vId.size();
	
	//CHECK IF ANY SLOTS AVAILABLE FOR THAT DATE
	if (vId_length &gt; 0)
	{
		for ( int b = 0 ; b &lt; vId_length ; b++ )
		{
			//Define a String to strip out all the configurable product options of the product
			vDate = JsonPath.read(prev.getResponseDataAsString(), &apos;$..date&apos;);
			String vSlotDetails = JsonPath.read(prev.getResponseDataAsString(), &apos;$..[?(@.slot_id)]&apos;+vId[b]+&apos;\&apos;)]&apos;);
			def vSlotId = JsonPath.read(vSlotDetails, &apos;.slot_id&apos;);
			

			String vFinalSlotDetails = (vDate[b] + &quot;,&quot; + vId[b] + &quot;,&quot; + vSlotId).replace(&apos;[&apos;,&apos;&apos;).replace(&apos;]&apos;,&apos;&apos;);
			//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;vFinalSlotDetails: &quot; + vFinalSlotDetails + &quot;\n&quot;+ &quot;\n&quot;);

	
			//WRITE DETAILS TO FILE
			f.append(vFinalSlotDetails + &apos;\n&apos;);
		}	
	}
	
	else
	{
		log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;**** NO SLOTS AVAILABLE FOR DATE: &quot; + vDate[a] + &quot;\n&quot;+ &quot;\n&quot;);
	}



//CLEAN UP VARIABLES
vDate = null;
//vDate_length = null;
vAllSlots = null;
vId = null;
vId_length = null;
vSlotDetails = null;
vSlotId = null;
vFinalSlotDetails = null;
vFinalSlotDetailsEscChar = null;
b = 0;</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SetupTG-Get-AppointmentSlot" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="date" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">date</stringProp>
                <stringProp name="Argument.value">${c_todayDate}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="room_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">room_id</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">type</stringProp>
                <stringProp name="Argument.value">2000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="days" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">days</stringProp>
                <stringProp name="Argument.value">20</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${API_Key}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
int randomNum = rand.nextInt((2000 - 1) + 1) +365;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

c.add(Calendar.DATE, randomNum);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_slots_in_single_day - pick a random day!" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">diary.[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="TestPlan.comments">data.storeAppointmentSlots[*].appointmentSlots[*]------------old Co-relaiton that was working now the response body has changed</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDate- get date" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDate</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.date</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails - pick random appointment" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointmentSlots[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
//int randomNum = rand.nextInt((40 - 1) + 1) +10;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

//c.add(Calendar.DATE, randomNum);
c.add(Calendar.DATE, 160);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">data.storeAppointmentSlots[*].appointmentSlots[*].appointmentSlots[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotStartTime" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_slotStartTime</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.start_time</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_slotId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.slot_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - Capture all booking slots and write to file - 04042023 " enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.jayway.jsonpath.JsonPath;
import org.apache.commons.lang3.RandomUtils;
import java.util.Random;
import org.apache.jmeter.services.FileServer;
import java.nio.channels.FileLock;


//START: SET UP FILE TO WRITE SLOT DETAILS TO
def baseDir=FileServer.getFileServer().getBaseDir();
log.info(&quot;baseDir is &quot; + baseDir);

//Injector executionfile_one.csv
//f = new File(baseDir + &quot;/../data/&quot; + &quot;DSPAU_Slots.csv&quot;);

//Local execution
f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_Slots.csv&quot;);


	String vAllSlots = JsonPath.read(prev.getResponseDataAsString(),&apos;$..[?(@.slot_id)]&apos;);
	//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;======== vAllSlots: &quot; + vAllSlots + &quot;\n&quot;+ &quot;\n&quot;);

	def vId = JsonPath.read(vAllSlots, &apos;.slot_id&apos;);
	def vId_length = vId.size();
	
	//CHECK IF ANY SLOTS AVAILABLE FOR THAT DATE
	if (vId_length &gt; 0)
	{
		for ( int b = 0 ; b &lt; vId_length ; b++ )
		{
			//Define a String to strip out all the configurable product options of the product
			vDate = JsonPath.read(prev.getResponseDataAsString(), &apos;$..date&apos;);
			String vSlotDetails = JsonPath.read(prev.getResponseDataAsString(), &apos;$..[?(@.slot_id)]&apos;+vId[b]+&apos;\&apos;)]&apos;);
			def vSlotId = JsonPath.read(vSlotDetails, &apos;.slot_id&apos;);
			

			String vFinalSlotDetails = (vDate[b] + &quot;,&quot; + vId[b] + &quot;,&quot; + vSlotId).replace(&apos;[&apos;,&apos;&apos;).replace(&apos;]&apos;,&apos;&apos;);
			//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;vFinalSlotDetails: &quot; + vFinalSlotDetails + &quot;\n&quot;+ &quot;\n&quot;);

	
			//WRITE DETAILS TO FILE
			f.append(vFinalSlotDetails + &apos;\n&apos;);
		}	
	}
	
	else
	{
		log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;**** NO SLOTS AVAILABLE FOR DATE: &quot; + vDate[a] + &quot;\n&quot;+ &quot;\n&quot;);
	}



//CLEAN UP VARIABLES
vDate = null;
//vDate_length = null;
vAllSlots = null;
vId = null;
vId_length = null;
vSlotDetails = null;
vSlotId = null;
vFinalSlotDetails = null;
vFinalSlotDetailsEscChar = null;
b = 0;</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUpTG_CollectionBookingSetSlots" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SetupTG-Get-AppointmentSlot" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="date" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">date</stringProp>
                <stringProp name="Argument.value">${c_todayDate}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="room_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">room_id</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">type</stringProp>
                <stringProp name="Argument.value">2005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="days" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">days</stringProp>
                <stringProp name="Argument.value">50</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${API_Key}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
int randomNum = rand.nextInt((2000 - 1) + 1) +365;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

c.add(Calendar.DATE, randomNum);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_slots_in_single_day - pick a random day!" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">diary.[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="TestPlan.comments">data.storeAppointmentSlots[*].appointmentSlots[*]------------old Co-relaiton that was working now the response body has changed</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDate- get date" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDate</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.date</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails - pick random appointment" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointmentSlots[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
//int randomNum = rand.nextInt((40 - 1) + 1) +10;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

//c.add(Calendar.DATE, randomNum);
c.add(Calendar.DATE, 130);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">data.storeAppointmentSlots[*].appointmentSlots[*].appointmentSlots[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotStartTime" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_slotStartTime</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.start_time</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_slotId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.slot_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - Capture all booking slots and write to file - 04042023 " enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.jayway.jsonpath.JsonPath;
import org.apache.commons.lang3.RandomUtils;
import java.util.Random;
import org.apache.jmeter.services.FileServer;
import java.nio.channels.FileLock;


//START: SET UP FILE TO WRITE SLOT DETAILS TO
def baseDir=FileServer.getFileServer().getBaseDir();
log.info(&quot;baseDir is &quot; + baseDir);

//Injector executionfile_one.csv
//f = new File(baseDir + &quot;/../data/&quot; + &quot;DSPAU_CollectionSlots.csv&quot;);

//Local execution
f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_CollectionSlots.csv&quot;);


	String vAllSlots = JsonPath.read(prev.getResponseDataAsString(),&apos;$..[?(@.slot_id)]&apos;);
	//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;======== vAllSlots: &quot; + vAllSlots + &quot;\n&quot;+ &quot;\n&quot;);

	def vId = JsonPath.read(vAllSlots, &apos;.slot_id&apos;);
	def vId_length = vId.size();
	
	
	//CHECK IF ANY SLOTS AVAILABLE FOR THAT DATE
	if (vId_length &gt; 0)
	{
		for ( int b = 0 ; b &lt; vId_length ; b=b+2 )
		{
			//Define a String to strip out all the configurable product options of the product
			vDate = JsonPath.read(prev.getResponseDataAsString(), &apos;$..date&apos;);
			String vSlotDetails = JsonPath.read(prev.getResponseDataAsString(), &apos;$..[?(@.slot_id)]&apos;+vId[b]+&apos;\&apos;)]&apos;);
			def vSlotId = JsonPath.read(vSlotDetails, &apos;.slot_id&apos;);
			

			String vFinalSlotDetails = (vDate[b] + &quot;,&quot; + vId[b] + &quot;,&quot; + vSlotId).replace(&apos;[&apos;,&apos;&apos;).replace(&apos;]&apos;,&apos;&apos;);
			//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;vFinalSlotDetails: &quot; + vFinalSlotDetails + &quot;\n&quot;+ &quot;\n&quot;);

	
			//WRITE DETAILS TO FILE
			f.append(vFinalSlotDetails + &apos;\n&apos;);
		}	
	}
	
	else
	{
		log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;**** NO SLOTS AVAILABLE FOR DATE: &quot; + vDate[a] + &quot;\n&quot;+ &quot;\n&quot;);
	}



//CLEAN UP VARIABLES
vDate = null;
//vDate_length = null;
vAllSlots = null;
vId = null;
vId_length = null;
vSlotDetails = null;
vSlotId = null;
vFinalSlotDetails = null;
vFinalSlotDetailsEscChar = null;
b = 0;</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - Capture all booking slots and write to file - 04042023 " enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.jayway.jsonpath.JsonPath;
import org.apache.commons.lang3.RandomUtils;
import java.util.Random;
import org.apache.jmeter.services.FileServer;
import java.nio.channels.FileLock;


//START: SET UP FILE TO WRITE SLOT DETAILS TO
def baseDir=FileServer.getFileServer().getBaseDir();
log.info(&quot;baseDir is &quot; + baseDir);

//Injector executionfile_one.csv
//f = new File(baseDir + &quot;/../data/&quot; + &quot;DSPAU_CollectionSlots_1.csv&quot;);

//Local execution
f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_CollectionSlots_1.csv&quot;);


	String vAllSlots = JsonPath.read(prev.getResponseDataAsString(),&apos;$..[?(@.slot_id)]&apos;);
	//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;======== vAllSlots: &quot; + vAllSlots + &quot;\n&quot;+ &quot;\n&quot;);

	def vId = JsonPath.read(vAllSlots, &apos;.slot_id&apos;);
	def vId_length = vId.size();
	

	//CHECK IF ANY SLOTS AVAILABLE FOR THAT DATE
	if (vId_length &gt; 0)
	{
		for ( int b = 1 ; b &lt; vId_length ; b=b+2 )
		{
			//Define a String to strip out all the configurable product options of the product
			vDate = JsonPath.read(prev.getResponseDataAsString(), &apos;$..date&apos;);
			String vSlotDetails = JsonPath.read(prev.getResponseDataAsString(), &apos;$..[?(@.slot_id)]&apos;+vId[b]+&apos;\&apos;)]&apos;);
			def vSlotId = JsonPath.read(vSlotDetails, &apos;.slot_id&apos;);
			

			String vFinalSlotDetails = (vDate[b] + &quot;,&quot; + vId[b] + &quot;,&quot; + vSlotId).replace(&apos;[&apos;,&apos;&apos;).replace(&apos;]&apos;,&apos;&apos;);
			//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;vFinalSlotDetails: &quot; + vFinalSlotDetails + &quot;\n&quot;+ &quot;\n&quot;);

	
			//WRITE DETAILS TO FILE
			f.append(vFinalSlotDetails + &apos;\n&apos;);
		}	
	}
	
	else
	{
		log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;**** NO SLOTS AVAILABLE FOR DATE: &quot; + vDate[a] + &quot;\n&quot;+ &quot;\n&quot;);
	}



//CLEAN UP VARIABLES
vDate = null;
//vDate_length = null;
vAllSlots = null;
vId = null;
vId_length = null;
vSlotDetails = null;
vSlotId = null;
vFinalSlotDetails = null;
vFinalSlotDetailsEscChar = null;
b = 0;</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUpTG_CancelSetSlots" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SetupTG-Get-AppointmentSlot" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="date" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">date</stringProp>
                <stringProp name="Argument.value">${c_todayDate}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="room_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">room_id</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">type</stringProp>
                <stringProp name="Argument.value">2000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="days" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">days</stringProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${API_Key}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
int randomNum = rand.nextInt((2000 - 1) + 1) +365;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

c.add(Calendar.DATE, randomNum);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_slots_in_single_day - pick a random day!" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">diary.[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="TestPlan.comments">data.storeAppointmentSlots[*].appointmentSlots[*]------------old Co-relaiton that was working now the response body has changed</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDate- get date" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDate</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.date</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails - pick random appointment" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointmentSlots[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
//int randomNum = rand.nextInt((40 - 1) + 1) +10;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

//c.add(Calendar.DATE, randomNum);
c.add(Calendar.DATE, 17);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">data.storeAppointmentSlots[*].appointmentSlots[*].appointmentSlots[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotStartTime" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_slotStartTime</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.start_time</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_slotId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.slot_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="write to csv" enabled="false">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer; 
import java.nio.channels.FileLock

//f = new File(vars.get(&quot;p_fileWriter&quot;) + &quot;/bookings_to_cancel_gb.csv&quot;)
String code = prev.getResponseCode(); 
if (code.equals(&quot;500&quot;)) {
	log.info(Thread.currentThread().getName() + &quot; graphql-30-setup-to-cancel c_optical_storeId=&quot; + vars.get(&quot;c_optical_storeId&quot;) + &quot; &quot; + prev.getResponseDataAsString());
} else {
	//String bookings_to_cancel_gb_filename = props.get(&quot;bookings_to_cancel_gb_filename&quot;);
	String baseDir=FileServer.getFileServer().getBaseDir();
     //log.info(&quot;baseDir is &quot; + baseDir); 
     f = new File(baseDir +&quot;/../data/&quot; + bookings_to_cancel_gb_filename);
	//f = new File(&quot;bookings_to_cancel_gb.csv&quot;)
	def str = vars.get(&quot;pc_customerId_gb&quot;) + &apos;,&apos; + vars.get(&quot;pc_appointmentId_gb&quot;) + &quot;,&quot; + vars.get(&quot;c_optical_storeId&quot;) + &quot;,&quot; + vars.get(&quot;pc_hash_gb&quot;)
	f.append( str + &apos;\n&apos;)
	log.info(&quot;new cancel booking: &quot; + str + &quot;,&quot; + vars.get(&quot;pc_appointmentDate_gb&quot;) + &quot;T&quot; + vars.get(&quot;pc_slotStartTime_gb&quot;) + &quot;:00Z&quot;);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="write to csv" enabled="false">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer; 
import java.nio.channels.FileLock

String code = prev.getResponseCode(); 
if (code.equals(&quot;500&quot;)) {
	log.info(prev.getResponseDataAsString());
} else {
	if(${__groovy(vars.get(&quot;pc_slotId&quot;) != &quot;NotFound&quot;)}){
	
	String baseDir=FileServer.getFileServer().getBaseDir();     
     f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_Slots.csv&quot;);	
	def str = vars.get(&quot;pc_appointmentDate&quot;) + &apos;,&apos; + vars.get(&quot;pc_slotStartTime&quot;) + &quot;,&quot; + vars.get(&quot;pc_slotId&quot;);
	f.append( str + &apos;\n&apos;)
	}	
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - Capture all booking slots and write to file - 04042023 " enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.jayway.jsonpath.JsonPath;
import org.apache.commons.lang3.RandomUtils;
import java.util.Random;
import org.apache.jmeter.services.FileServer;
import java.nio.channels.FileLock;


//START: SET UP FILE TO WRITE SLOT DETAILS TO
def baseDir=FileServer.getFileServer().getBaseDir();
log.info(&quot;baseDir is &quot; + baseDir);

//Injector executionfile_one.csv
//f = new File(baseDir + &quot;/../data/&quot; + &quot;DSPAU_CancelSlots.csv&quot;);

//Local execution
f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_CancelSlots.csv&quot;);


	String vAllSlots = JsonPath.read(prev.getResponseDataAsString(),&apos;$..[?(@.slot_id)]&apos;);
	//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;======== vAllSlots: &quot; + vAllSlots + &quot;\n&quot;+ &quot;\n&quot;);

	def vId = JsonPath.read(vAllSlots, &apos;.slot_id&apos;);
	def vId_length = vId.size();
	
	
	//CHECK IF ANY SLOTS AVAILABLE FOR THAT DATE
	if (vId_length &gt; 0)
	{
		for ( int b = 0 ; b &lt; vId_length ; b++ )
		{
			//Define a String to strip out all the configurable product options of the product
			vDate = JsonPath.read(prev.getResponseDataAsString(), &apos;$..date&apos;);
			String vSlotDetails = JsonPath.read(prev.getResponseDataAsString(), &apos;$..[?(@.slot_id)]&apos;+vId[b]+&apos;\&apos;)]&apos;);
			def vSlotId = JsonPath.read(vSlotDetails, &apos;.slot_id&apos;);
			

			String vFinalSlotDetails = (vDate[b] + &quot;,&quot; + vId[b] + &quot;,&quot; + vSlotId).replace(&apos;[&apos;,&apos;&apos;).replace(&apos;]&apos;,&apos;&apos;);
			//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;vFinalSlotDetails: &quot; + vFinalSlotDetails + &quot;\n&quot;+ &quot;\n&quot;);

	
			//WRITE DETAILS TO FILE
			f.append(vFinalSlotDetails + &apos;\n&apos;);
		}	
	}
	
	else
	{
		log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;**** NO SLOTS AVAILABLE FOR DATE: &quot; + vDate[a] + &quot;\n&quot;+ &quot;\n&quot;);
	}



//CLEAN UP VARIABLES
vDate = null;
//vDate_length = null;
vAllSlots = null;
vId = null;
vId_length = null;
vSlotDetails = null;
vSlotId = null;
vFinalSlotDetails = null;
vFinalSlotDetailsEscChar = null;
b = 0;</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUpTG_BookingSetSlots" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SetupTG-Get-AppointmentSlot" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="date" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">date</stringProp>
                <stringProp name="Argument.value">${c_todayDate}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="room_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">room_id</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">type</stringProp>
                <stringProp name="Argument.value">2000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="days" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">days</stringProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${API_Key}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
int randomNum = rand.nextInt((2000 - 1) + 1) +365;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

c.add(Calendar.DATE, randomNum);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_slots_in_single_day - pick a random day!" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">diary.[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="TestPlan.comments">data.storeAppointmentSlots[*].appointmentSlots[*]------------old Co-relaiton that was working now the response body has changed</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDate- get date" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDate</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.date</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails - pick random appointment" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointmentSlots[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
//int randomNum = rand.nextInt((40 - 1) + 1) +10;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

//c.add(Calendar.DATE, randomNum);
c.add(Calendar.DATE, 20);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">data.storeAppointmentSlots[*].appointmentSlots[*].appointmentSlots[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotStartTime" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_slotStartTime</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.start_time</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_slotId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.slot_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - Capture all booking slots and write to file - 04042023 " enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.jayway.jsonpath.JsonPath;
import org.apache.commons.lang3.RandomUtils;
import java.util.Random;
import org.apache.jmeter.services.FileServer;
import java.nio.channels.FileLock;


//START: SET UP FILE TO WRITE SLOT DETAILS TO
def baseDir=FileServer.getFileServer().getBaseDir();
log.info(&quot;baseDir is &quot; + baseDir);

//Injector executionfile_one.csv
//f = new File(baseDir + &quot;/../data/&quot; + &quot;DSPAU_BookingSlots.csv&quot;);

//Local execution
f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_BookingSlots.csv&quot;);


	String vAllSlots = JsonPath.read(prev.getResponseDataAsString(),&apos;$..[?(@.slot_id)]&apos;);
	//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;======== vAllSlots: &quot; + vAllSlots + &quot;\n&quot;+ &quot;\n&quot;);

	def vId = JsonPath.read(vAllSlots, &apos;.slot_id&apos;);
	def vId_length = vId.size();
	
	
	//CHECK IF ANY SLOTS AVAILABLE FOR THAT DATE
	if (vId_length &gt; 0)
	{
		for ( int b = 0 ; b &lt; vId_length ; b++ )
		{
			//Define a String to strip out all the configurable product options of the product
			vDate = JsonPath.read(prev.getResponseDataAsString(), &apos;$..date&apos;);
			String vSlotDetails = JsonPath.read(prev.getResponseDataAsString(), &apos;$..[?(@.slot_id)]&apos;+vId[b]+&apos;\&apos;)]&apos;);
			def vSlotId = JsonPath.read(vSlotDetails, &apos;.slot_id&apos;);
			

			String vFinalSlotDetails = (vDate[b] + &quot;,&quot; + vId[b] + &quot;,&quot; + vSlotId).replace(&apos;[&apos;,&apos;&apos;).replace(&apos;]&apos;,&apos;&apos;);
			//log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;vFinalSlotDetails: &quot; + vFinalSlotDetails + &quot;\n&quot;+ &quot;\n&quot;);

	
			//WRITE DETAILS TO FILE
			f.append(vFinalSlotDetails + &apos;\n&apos;);
		}	
	}
	
	else
	{
		log.info(&quot;\n&quot; + &quot;\n&quot; + &quot;**** NO SLOTS AVAILABLE FOR DATE: &quot; + vDate[a] + &quot;\n&quot;+ &quot;\n&quot;);
	}



//CLEAN UP VARIABLES
vDate = null;
//vDate_length = null;
vAllSlots = null;
vId = null;
vId_length = null;
vSlotDetails = null;
vSlotId = null;
vFinalSlotDetails = null;
vFinalSlotDetailsEscChar = null;
b = 0;</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUpTG_CancelBookingSet" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">3</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration1)}</stringProp>
        <stringProp name="ThreadGroup.delay">600</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_CancelSlots.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">pc_appointmentDate,pc_slotId</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SetupCBTG-Book-Appointment" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;date&quot; : &quot;${pc_appointmentDate}&quot;,&#xd;
    &quot;type&quot; : 2000, &#xd;
    &quot;slot_ids&quot; : [${pc_slotId}],&#xd;
    &quot;note&quot; : &quot;&quot;,&#xd;
    &quot;customer&quot;: {&#xd;
        &quot;gender_id&quot;: 1,&#xd;
        &quot;title_id&quot;: 1,&#xd;
        &quot;first_name&quot;: &quot;Perftest${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}&quot;,&#xd;
        &quot;last_name&quot;: &quot;Perftest${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}&quot;,&#xd;
        &quot;date_of_birth&quot;: &quot;1980-01-01&quot;,&#xd;
        &quot;email&quot;: &quot;success+label${__Random(01,100000,)}@simulator.amazonses.com&quot;,&#xd;
        &quot;mobile&quot;: &quot;07572323338&quot;,&#xd;
        &quot;sa_authority_id&quot;: 2,&#xd;
        &quot;std&quot;: &quot;134&quot;,&#xd;
        &quot;medicare&quot;: {&#xd;
		      &quot;number&quot;: &quot;2123456701&quot;,&#xd;
		      &quot;irn&quot;: &quot;1&quot;,&#xd;
		      &quot;valid_date&quot;: &quot;2100-12&quot;&#xd;
    	}&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_slots_in_single_day - pick a random day!" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">appointment.[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="TestPlan.comments">data.storeAppointmentSlots[*].appointmentSlots[*]------------old Co-relaiton that was working now the response body has changed</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${API_Key}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_AppointmentId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_AppointmentId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointment.appointment_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_CustomerId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_CustomerId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.customer.customer_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="write to csv" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer; 
import java.nio.channels.FileLock

String code = prev.getResponseCode(); 
if (code.equals(&quot;500&quot;)) {
	log.info(prev.getResponseDataAsString());
} else {
	String baseDir=FileServer.getFileServer().getBaseDir();  
	//f = new File(baseDir + &quot;/../data/&quot; + &quot;DSPAU_CancelBooking.csv&quot;);   
     f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_CancelBooking.csv&quot;);	
	def str = vars.get(&quot;pc_AppointmentId&quot;)+ &quot;,&quot; + vars.get(&quot;pc_CustomerId&quot;);
	f.append( str + &apos;\n&apos;)	
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>8.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUpTG_BookingSet" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">3</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration1)}</stringProp>
        <stringProp name="ThreadGroup.delay">600</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_BookingSlots.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">pc_appointmentDate,pc_slotId</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SetupBTG-Book-Appointment" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;date&quot; : &quot;${pc_appointmentDate}&quot;,&#xd;
    &quot;type&quot; : 2000, &#xd;
    &quot;slot_ids&quot; : [${pc_slotId}],&#xd;
    &quot;note&quot; : &quot;&quot;,&#xd;
    &quot;customer&quot;: {&#xd;
        &quot;gender_id&quot;: 1,&#xd;
        &quot;title_id&quot;: 1,&#xd;
        &quot;first_name&quot;: &quot;Perftest${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}&quot;,&#xd;
        &quot;last_name&quot;: &quot;Perftest${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}&quot;,&#xd;
        &quot;date_of_birth&quot;: &quot;1980-01-01&quot;,&#xd;
        &quot;email&quot;: &quot;success+label${__Random(01,100000,)}@simulator.amazonses.com&quot;,&#xd;
        &quot;mobile&quot;: &quot;07572323338&quot;,&#xd;
        &quot;sa_authority_id&quot;: 2,&#xd;
        &quot;std&quot;: &quot;134&quot;,&#xd;
        &quot;medicare&quot;: {&#xd;
		      &quot;number&quot;: &quot;2123456701&quot;,&#xd;
		      &quot;irn&quot;: &quot;1&quot;,&#xd;
		      &quot;valid_date&quot;: &quot;2100-12&quot;&#xd;
    	}&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_slots_in_single_day - pick a random day!" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">all_slots_in_single_day</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">appointment.[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="TestPlan.comments">data.storeAppointmentSlots[*].appointmentSlots[*]------------old Co-relaiton that was working now the response body has changed</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${API_Key}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_AppointmentId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_AppointmentId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointment.appointment_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_CustomerId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pc_CustomerId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.customer.customer_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="write to csv" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer; 
import java.nio.channels.FileLock

String code = prev.getResponseCode(); 
if (code.equals(&quot;500&quot;)) {
	log.info(prev.getResponseDataAsString());
} else {
	String baseDir=FileServer.getFileServer().getBaseDir();  
	//f = new File(baseDir + &quot;/../data/&quot; + &quot;DSPAU_Bookings.csv&quot;);     
     f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_Bookings.csv&quot;);	
	def str = vars.get(&quot;pc_AppointmentId&quot;)+ &quot;,&quot; + vars.get(&quot;pc_CustomerId&quot;);
	f.append( str + &apos;\n&apos;)	
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>8.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Customer_Medicare_Validate_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">50</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(load.rampUp)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T01_DSP_EU_Customer_Medicare_Validate" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Customer-Medicare-Validate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	  &quot;number&quot;: &quot;${__Random(2123456701,2123456709)}&quot;,&#xd;
	  &quot;irn&quot;: &quot;1&quot;,&#xd;
	  &quot;valid_date&quot;: &quot;2100-12&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/customer/medicare/validate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
          <doubleProp>
            <name>throughput</name>
            <value>3.33</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GetAppointmentSlot_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(load.rampUp1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(load.rampUp)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T02_DSP_EU_Dairy_GetAppointmentSlot" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get-AppointmentSlot" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">date</stringProp>
                  <stringProp name="Argument.value">${c_todayDate}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="room_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">room_id</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">2000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="days" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">days</stringProp>
                  <stringProp name="Argument.value">${__Random(1,7,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
int randomNum = rand.nextInt((40 - 1) + 1) +10;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

c.add(Calendar.DATE, randomNum);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>19.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BookAppointment_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(load.rampUp1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(load.rampUp)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_Slots.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">pc_appointmentDate,pc_slotId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T03_DSP_EU_Dairy_BookAppointment" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Book-Appointment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;date&quot; : &quot;${pc_appointmentDate}&quot;,&#xd;
    &quot;type&quot; : 2000, &#xd;
    &quot;slot_ids&quot; : [${pc_slotId}],&#xd;
    &quot;note&quot; : &quot;&quot;,&#xd;
    &quot;customer&quot;: {&#xd;
        &quot;gender_id&quot;: 1,&#xd;
        &quot;title_id&quot;: 1,&#xd;
        &quot;first_name&quot;: &quot;Perftest${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}&quot;,&#xd;
        &quot;last_name&quot;: &quot;Perftest${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}&quot;,&#xd;
        &quot;date_of_birth&quot;: &quot;1980-01-01&quot;,&#xd;
        &quot;email&quot;: &quot;success+label${__Random(01,100000,)}@simulator.amazonses.com&quot;,&#xd;
        &quot;mobile&quot;: &quot;07572323338&quot;,&#xd;
        &quot;sa_authority_id&quot;: 2,&#xd;
        &quot;std&quot;: &quot;134&quot;,&#xd;
        &quot;medicare&quot;: {&#xd;
		      &quot;number&quot;: &quot;2123456701&quot;,&#xd;
		      &quot;irn&quot;: &quot;1&quot;,&#xd;
		      &quot;valid_date&quot;: &quot;2100-12&quot;&#xd;
    	}&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_slots_in_single_day - pick a random day!" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">all_slots_in_single_day</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">appointment.[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="TestPlan.comments">data.storeAppointmentSlots[*].appointmentSlots[*]------------old Co-relaiton that was working now the response body has changed</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_AppointmentId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_AppointmentId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointment.appointment_id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_CustomerId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_CustomerId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.customer.customer_id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="write to csv" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer; 
import java.nio.channels.FileLock

String code = prev.getResponseCode(); 
if (code.equals(&quot;500&quot;)) {
	log.info(prev.getResponseDataAsString());
} else {	
	String baseDir=FileServer.getFileServer().getBaseDir();  
	//f = new File(baseDir + &quot;/../data/&quot; + &quot;DSPAU_TeardownBooking.csv&quot;);    
     f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_TeardownBooking.csv&quot;);	
	def str = vars.get(&quot;pc_AppointmentId&quot;)+ &quot;,&quot; + vars.get(&quot;pc_CustomerId&quot;);
	f.append( str + &apos;\n&apos;)	
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1995447656">Booked</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>150.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BookCollectionAppointment_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(load.rampUp1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(load.rampUp)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_CollectionSlots.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">pc_appointmentDate1,pc_slotId1</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_CollectionSlots_1.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">pc_appointmentDate2,pc_slotId2</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;pc_appointmentDate1&quot;) == vars.get(&quot;pc_appointmentDate2&quot;))}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T04_01_DSP_EU_Dairy_Book_CollectionAppointment" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Book-Collectionof-Appointments" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;date&quot; : &quot;${pc_appointmentDate1}&quot;,&#xd;
    &quot;type&quot; : 2005, &#xd;
    &quot;slot_ids&quot; : [&quot;${pc_slotId1}&quot;,&quot;${pc_slotId2}&quot;],&#xd;
    &quot;note&quot; : &quot;&quot;,&#xd;
    &quot;customer_id&quot; : ${__Random(120,140,)}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${API_Key}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">data.storeAppointmentSlots[*].appointmentSlots[*].appointmentSlots[*]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_AppointmentId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">pc_AppointmentId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointment.appointment_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_CustomerId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">pc_CustomerId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.customer.customer_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="write to csv" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer; 
import java.nio.channels.FileLock

String code = prev.getResponseCode(); 
if (code.equals(&quot;500&quot;)) {
	log.info(prev.getResponseDataAsString());
} else {	
	String baseDir=FileServer.getFileServer().getBaseDir();   
	//f = new File(baseDir + &quot;/../data/&quot; + &quot;DSPAU_TeardownCollectionBooking.csv&quot;);    
     f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_TeardownCollectionBooking.csv&quot;);	
	def str = vars.get(&quot;pc_AppointmentId&quot;)+ &quot;,&quot; + vars.get(&quot;pc_CustomerId&quot;);
	f.append( str + &apos;\n&apos;)	
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>150.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GetAppointment_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(load.rampUp1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(load.rampUp)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_Bookings.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">pc_AppointmentId,pc_CustomerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T05_DSP_EU_Get_Appointment" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Appointment" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="customer_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">customer_id</stringProp>
                  <stringProp name="Argument.value">${pc_CustomerId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary/${pc_AppointmentId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="518703361">Check Booking</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>6.5</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GetCustomerData_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(load.rampUp1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(load.rampUp)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_Bookings.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">pc_AppointmentId,pc_CustomerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T06_DSP_EU_Get_CustomerData" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get-Customer-Data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/customer/${pc_CustomerId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-160985414">first_name</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>3.33</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AmendAppointment_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(load.rampUp1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(load.rampUp)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_Bookings.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">pc_AppointmentId,pc_CustomerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T07_DSP_EU_AmendAppointment" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get-AmendAppointmentSlot" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">date</stringProp>
                  <stringProp name="Argument.value">${c_todayDate}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="room_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">room_id</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">2000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="days" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">days</stringProp>
                  <stringProp name="Argument.value">20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="94851343">count</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_slots_in_single_day - pick a random day!" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">all_slots_in_single_day</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">diary.[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="TestPlan.comments">data.storeAppointmentSlots[*].appointmentSlots[*]------------old Co-relaiton that was working now the response body has changed</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDate_Amend- get date" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDate_Amend</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.date</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails_gb - pick random appointment" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointmentSlots[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
//int randomNum = rand.nextInt((20 - 1) + 1) +20;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

//c.add(Calendar.DATE, randomNum);
c.add(Calendar.DATE, 22);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
int randomNum = rand.nextInt((20 - 1) + 1) +20;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

c.add(Calendar.DATE, randomNum);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails_gb" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.storeAppointmentSlots[*].appointmentSlots[*].appointmentSlots[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotStartTime" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_slotStartTime</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.start_time</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotId_Amend" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_slotId_Amend</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.slot_id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Amend_Appointment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;date&quot; : &quot;${pc_appointmentDate_Amend}&quot;,&#xd;
    &quot;customer_id&quot;: ${pc_CustomerId},&#xd;
    &quot;type&quot; : 2000,&#xd;
    &quot;slot_ids&quot; : [${pc_slotId_Amend}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary/${pc_AppointmentId}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1468229634">Update Booking</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>20.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CancelAppointment_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(load.rampUp1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(load.rampUp)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_CancelBooking.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">pc_AppointmentId,pc_CustomerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T08_DSP_EU_Cancel_Appointment" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cancel_Appointment" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="customer_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">customer_id</stringProp>
                  <stringProp name="Argument.value">${pc_CustomerId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary/${pc_AppointmentId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1333191501">Cancel Booking</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>12.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Features_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(load.rampUp1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(load.rampUp)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T09_DSP_EU_Features" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Store-Features" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/features</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-290659267">features</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>25.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SDSHealth_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(load.rampUp1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(load.rampUp)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T10_DSP_EU_SDSHealth" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SDS-Health" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/sds-health</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-892481550">status</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>3.33</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="StoreHealth_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(load.rampUp1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(load.rampUp)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T11_DSP_EU_StoreHealth" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Store-Health" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/health</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-887328209">system</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>30.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Versions_Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">180</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T12_DSP_EU_Versions" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Store-Versions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/versions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3373707">name</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
          <doubleProp>
            <name>throughput</name>
            <value>3.33</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8086</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/v2/write?org=demo&amp;bucket=demo&amp;token=1L7cbHVNXrbmOjgP_8UUfLTezb6jUYhyJrlzZ1wEcWLEfj3zOPer0pwzYsnErueL-8mO5bAx0f5PS49ehhOStA==</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PVQ_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T13_DSP_EU_PVQ" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get-AppointmentSlot" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">date</stringProp>
                  <stringProp name="Argument.value">${c_todayDate}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="room_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">room_id</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">2000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="days" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">days</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
int randomNum = rand.nextInt((2000 - 1) + 1) +365;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

c.add(Calendar.DATE, randomNum);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="94851343">count</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_slots_in_single_day - pick a random day!" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">all_slots_in_single_day</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">diary.[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="TestPlan.comments">data.storeAppointmentSlots[*].appointmentSlots[*]------------old Co-relaiton that was working now the response body has changed</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDate- get date" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.date</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails - pick random appointment" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointmentSlots[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Random;

Random rand = new Random();
int randomNum = rand.nextInt((40 - 1) + 1) +10;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

def c = Calendar.getInstance();

c.add(Calendar.DATE, randomNum);
def today = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 1);
def tomorrow = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 6);
def plusSeven = sdf.format(c.getTime()) as String;

c.add(Calendar.DATE, 53);
def daySixty = sdf.format(c.getTime()) as String;

vars.put(&quot;c_todayDate&quot;, today)
vars.put(&quot;c_tomorrowDate&quot;, tomorrow)
vars.put(&quot;c_daySeven&quot;, plusSeven)
vars.put(&quot;c_daySixty&quot;, daySixty)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_appointmentDetails" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pc_appointmentDetails</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.storeAppointmentSlots[*].appointmentSlots[*].appointmentSlots[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotStartTime" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_slotStartTime</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.start_time</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_slotId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_slotId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.slot_id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="write to csv" enabled="false">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer; 
import java.nio.channels.FileLock

//f = new File(vars.get(&quot;p_fileWriter&quot;) + &quot;/bookings_to_cancel_gb.csv&quot;)
String code = prev.getResponseCode(); 
if (code.equals(&quot;500&quot;)) {
	log.info(Thread.currentThread().getName() + &quot; graphql-30-setup-to-cancel c_optical_storeId=&quot; + vars.get(&quot;c_optical_storeId&quot;) + &quot; &quot; + prev.getResponseDataAsString());
} else {
	//String bookings_to_cancel_gb_filename = props.get(&quot;bookings_to_cancel_gb_filename&quot;);
	String baseDir=FileServer.getFileServer().getBaseDir();
     //log.info(&quot;baseDir is &quot; + baseDir); 
     f = new File(baseDir +&quot;/../data/&quot; + bookings_to_cancel_gb_filename);
	//f = new File(&quot;bookings_to_cancel_gb.csv&quot;)
	def str = vars.get(&quot;pc_customerId_gb&quot;) + &apos;,&apos; + vars.get(&quot;pc_appointmentId_gb&quot;) + &quot;,&quot; + vars.get(&quot;c_optical_storeId&quot;) + &quot;,&quot; + vars.get(&quot;pc_hash_gb&quot;)
	f.append( str + &apos;\n&apos;)
	log.info(&quot;new cancel booking: &quot; + str + &quot;,&quot; + vars.get(&quot;pc_appointmentDate_gb&quot;) + &quot;T&quot; + vars.get(&quot;pc_slotStartTime_gb&quot;) + &quot;:00Z&quot;);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Book-Appointment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;date&quot; : &quot;${pc_appointmentDate}&quot;,&#xd;
    &quot;type&quot; : 2000, &#xd;
    &quot;slot_ids&quot; : [${pc_slotId}],&#xd;
    &quot;note&quot; : &quot;&quot;,&#xd;
    &quot;customer&quot;: {&#xd;
        &quot;gender_id&quot;: 1,&#xd;
        &quot;title_id&quot;: 1,&#xd;
        &quot;first_name&quot;: &quot;Perftest${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}&quot;,&#xd;
        &quot;last_name&quot;: &quot;Perftest${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}&quot;,&#xd;
        &quot;date_of_birth&quot;: &quot;1980-01-01&quot;,&#xd;
        &quot;email&quot;: &quot;Perftest${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}@gmail.com&quot;,&#xd;
        &quot;mobile&quot;: &quot;07572323338&quot;,&#xd;
        &quot;sa_authority_id&quot;: 2,&#xd;
        &quot;std&quot;: &quot;134&quot;,&#xd;
        &quot;medicare&quot;: {&#xd;
		      &quot;number&quot;: &quot;2123456701&quot;,&#xd;
		      &quot;irn&quot;: &quot;1&quot;,&#xd;
		      &quot;valid_date&quot;: &quot;2100-12&quot;&#xd;
    	}&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_slots_in_single_day - pick a random day!" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">all_slots_in_single_day</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">appointment.[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="TestPlan.comments">data.storeAppointmentSlots[*].appointmentSlots[*]------------old Co-relaiton that was working now the response body has changed</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_AppointmentId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_AppointmentId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.appointment.appointment_id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_CustomerId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_CustomerId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.customer.customer_id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="write to csv" enabled="false">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer; 
import java.nio.channels.FileLock

String code = prev.getResponseCode(); 
if (code.equals(&quot;500&quot;)) {
	log.info(prev.getResponseDataAsString());
} else {	
	String baseDir=FileServer.getFileServer().getBaseDir();      
     f = new File(&quot;C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_TeardownBooking.csv&quot;);	
	def str = vars.get(&quot;pc_AppointmentId&quot;)+ &quot;,&quot; + vars.get(&quot;pc_CustomerId&quot;);
	f.append( str + &apos;\n&apos;)	
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_firstName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_firstName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.customer.first_name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_lastName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_lastName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.customer.last_name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pc_emailAddress" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pc_emailAddress</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.customer.email</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">all_slots_in_single_day</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Store-pvq" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;store_id&quot;: ${StoreID},&#xd;
  &quot;customer_id&quot;: 242,&#xd;
  &quot;appointment_id&quot;: 3385,&#xd;
  &quot;appointment_time&quot;: &quot;${pc_appointmentDate}T00:00:00.000Z&quot;,&#xd;
  &quot;submitted_time&quot;: &quot;${pc_appointmentDate}T00:00:00.000Z&quot;,&#xd;
  &quot;first_name&quot;: &quot;${pc_firstName}&quot;,&#xd;
  &quot;last_name&quot;: &quot;${pc_lastName}&quot;,&#xd;
  &quot;date_of_birth&quot;: &quot;1980-01-01&quot;,&#xd;
  &quot;email_address&quot;: &quot;${pc_emailAddress}&quot;,&#xd;
  &quot;address_1&quot;: &quot;12 Longbeach Road&quot;,&#xd;
  &quot;address_2&quot;: &quot;&quot;,&#xd;
  &quot;postcode&quot;: &quot;DT4 8RP&quot;,&#xd;
  &quot;phone&quot;: &quot;07572323338&quot;&#xd;
  &quot;responses&quot;: [&#xd;
    {      &quot;do_you_or_anyone_in_your_household_have_a_fever_a_new_persistent_cough_loss_of_taste_or_smell_or_any_other_symptoms_of_covid_19&quot;: &quot;no&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;have_you_tested_positive_for_covid_19_in_the_last_7_days_or_are_you_awaiting_a_test_or_a_result_of_a_test&quot;: &quot;no&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;have_you_been_advised_to_self_isolate_as_part_of_the_covid__19_contact_tracing_program_or_from_any_other_source&quot;: &quot;no&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;do_you_live_with_someone_who_has_either_tested_positive_for_covid_19_or_had_symptoms_of_covid_19_in_the_last_14_days&quot;: &quot;no&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;what_is_the_main_reason_for_your_appointment_with_us&quot;: &quot;New glasses&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;do_you_have_any_other_vision_or_eye_health_concerns_or_headaches&quot;: &quot;no&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;do_you_take_any_medications&quot;: &quot;no&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name_of_your_gp_surgery&quot;: &quot;Castleford Surgergy&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;do_you_use_computer_tablet_and_phone_screens_at_all&quot;: &quot;Yes 8 hours&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;what_is_your_occupation&quot;: &quot;Solution Architect at Specsavers&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;what_are_your_main_hobbies_and_interests&quot;: &quot;Working for Specsavers&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;do_you_currently_wear_glasses&quot;: &quot;yes&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;what_type_of_glasses_do_you_wear&quot;: &quot;Near&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;do_you_have_any_issues_with_your_current_glasses&quot;: &quot;No&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;are_you_a_contact_lens_wearer&quot;: &quot;No&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;would_you_consider_wearing_contact_lenses_as_an_alternative_to_glasses&quot;: &quot;No&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;have_you_noticed_any_problems_with_your_hearing&quot;: &quot;No&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">njdlt80899.execute-api.ap-southeast-2.amazonaws.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/pvq</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">${API_Key}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TeardownAppointments_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">70000</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration1)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__groovy(Integer.parseInt(props.get(&quot;load.rampUp&quot;)) + Integer.parseInt(props.get(&quot;load.loadDuration&quot;)),)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_TeardownBooking.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">pc_AppointmentId,pc_CustomerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cancel_TDAppointments" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="customer_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">customer_id</stringProp>
                <stringProp name="Argument.value">${pc_CustomerId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary/${pc_AppointmentId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${API_Key}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TeardownCancelSetAppointments_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3000</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">2</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration1)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__groovy(Integer.parseInt(props.get(&quot;load.rampUp&quot;)) + Integer.parseInt(props.get(&quot;load.loadDuration&quot;)),)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_CancelBooking.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">pc_AppointmentId,pc_CustomerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cancel_TDCancelSetAppointments" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="customer_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">customer_id</stringProp>
                <stringProp name="Argument.value">${pc_CustomerId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary/${pc_AppointmentId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${API_Key}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TeardownBookingSetAppointment_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3000</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">2</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration1)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__groovy(Integer.parseInt(props.get(&quot;load.rampUp&quot;)) + Integer.parseInt(props.get(&quot;load.loadDuration&quot;)),)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_Bookings.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">pc_AppointmentId,pc_CustomerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cancel_TDBookingSetAppointment" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="customer_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">customer_id</stringProp>
                <stringProp name="Argument.value">${pc_CustomerId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary/${pc_AppointmentId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${API_Key}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TeardownCollectionAppointment_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(load.loadDuration1)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__groovy(Integer.parseInt(props.get(&quot;load.rampUp&quot;)) + Integer.parseInt(props.get(&quot;load.loadDuration&quot;)),)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/gnarala/Performance-Testing/mvp-FB/data/DSPAU_TeardownCollectionBooking.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">pc_AppointmentId,pc_CustomerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cancel_TDCollectionAppointment" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="customer_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">customer_id</stringProp>
                <stringProp name="Argument.value">${pc_CustomerId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DSPEU_Host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">uat_public/v1/${StoreID}/diary/${pc_AppointmentId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${API_Key}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="false">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://localhost:8086/write?db=jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">application name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">99;95;90</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Test name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
